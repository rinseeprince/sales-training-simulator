import { NextRequest, NextResponse } from 'next/server';
import { supabaseClient } from '@/lib/supabase-auth';

export async function GET(request: NextRequest) {
  const { searchParams, origin, hash } = new URL(request.url);
  const code = searchParams.get('code');
  const next = searchParams.get('next') ?? '/dashboard';
  const error = searchParams.get('error');
  const errorDescription = searchParams.get('error_description');

  // Parse hash fragment for error parameters (Supabase puts them in hash)
  let hashError = null;
  let hashErrorDescription = null;
  if (hash) {
    const hashParams = new URLSearchParams(hash.substring(1)); // Remove the # symbol
    hashError = hashParams.get('error');
    hashErrorDescription = hashParams.get('error_description');
  }

  console.log('Auth callback received:', { 
    code: code ? 'present' : 'missing', 
    next, 
    origin,
    error,
    errorDescription,
    hashError,
    hashErrorDescription,
    hash
  });

  // If there's an error in the URL or hash, redirect to error page
  if (error || hashError) {
    const finalError = error || hashError;
    const finalErrorDescription = errorDescription || hashErrorDescription;
    console.error('Error in callback URL:', { finalError, finalErrorDescription });
    return NextResponse.redirect(`${origin}/auth/auth-code-error?error=${finalError}&error_description=${finalErrorDescription}`);
  }

  if (code) {
    try {
      const { data, error: exchangeError } = await supabaseClient.auth.exchangeCodeForSession(code);
      
      console.log('Exchange code result:', { 
        success: !exchangeError, 
        error: exchangeError?.message,
        user: data?.user?.email 
      });
      
      if (!exchangeError && data?.user) {
        // Successful verification/login
        console.log('Redirecting to:', `${origin}${next}`);
        return NextResponse.redirect(`${origin}${next}`);
      } else {
        console.error('Exchange code error:', exchangeError);
        return NextResponse.redirect(`${origin}/auth/auth-code-error?error=exchange_failed&error_description=${exchangeError?.message || 'Failed to exchange code'}`);
      }
    } catch (err) {
      console.error('Callback error:', err);
      return NextResponse.redirect(`${origin}/auth/auth-code-error?error=callback_error&error_description=${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  } else {
    console.error('No code provided in callback');
    return NextResponse.redirect(`${origin}/auth/auth-code-error?error=no_code&error_description=No verification code provided`);
  }
}
